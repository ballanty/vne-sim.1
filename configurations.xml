<utilities>
    <!-- log level can be set using the environment variable LOG_LEVEL. If LOG_LEVEL is not set this variable will be used.-->
    <logLevel>error</logLevel>
    <!-- if you want to use venv to run python from a Virtual Environment, you have to provide a full path to the interpreter
         an example: /Users/ballanty/CLionProjects/vne-sim/venv/bin/python
         leave it empty for system python -->
    <pythonPath></pythonPath>
</utilities>

<core>
    <!-- This conditino can be used by all the algorithms to ignore the location constraint -->
    <ignoreLocationConstrain>false</ignoreLocationConstrain>
    <!--The result database file-->
    <dbPath>/Users/Soroosh/Desktop/</dbPath>
    <!-- 0 uses the libraries standard seed -->
    <rngSeed>0</rngSeed>
    <rngUseSameSeedForParallelRuns>false</rngUseSameSeedForParallelRuns>
    <!--Verious random number generator types that gsl_rng library implements may be found at: -->
    <!--https://www.gnu.org/software/gsl/manual/html_node/Random-number-generator-algorithms.html#Random-number-generator-algorithms -->
    <rngType>gsl_rng_mt19937</rngType>
</core>

<NetworkFileGenerator>
  <!-- Select network file generator: BRITE or FNSS-->
  <Handler>FNSS</Handler>
    <!-- Waxman DCNBCube-->
    <SNTopologyType>DCNFatTree</SNTopologyType>
    <VNTopologyType>Waxman</VNTopologyType>
    <BriteHandler>
    	<BriteSeedFile>/Users/Soroosh/google-drive/src/codes/workspaces/workspace-cpp/vne-mcts/external-libs/BRITE/seed_file</BriteSeedFile>
        <!-- Random = 1, Heavy Tailed = 2 -->
        <nodePlacement>1</nodePlacement>
        <!-- Number of neighboring node each new node connects to. -->
        <numNeighbors>6</numNeighbors>
        <!-- We assume the same grid size for SN and VNRs-->
        <innerGridSize>40</innerGridSize>
        <outerGridSize>40</outerGridSize>
        
        <RTWaxman>
            <!-- 1 = incremental, 2 = all -->
            <growthType>2</growthType>
            <alpha>0.5</alpha>
            <beta>0.2</beta>
        </RTWaxman>
    </BriteHandler>
    <FNSSHandler>
      <DCNBCube>
          <!-- Hosts per Bcube_0 -->
          <N>4</N>
          <!-- Level of Bcube -->
          <K>2</K>
      </DCNBCube>
      <DCNTwoTier>
          <!-- Total number of core switches -->
          <n_core>10</n_core>
          <!-- Total number of edge switches -->
          <n_edges>12</n_edges>
          <!-- Total number of hosts connected to each edge swtich -->
          <n_hosts>5</n_hosts>
          <!-- The link bandwidth of the links connecting the core switches to edge switches will be multiplied by this (must be integer) -->
          <coreBWMultiplier>1</<coreBWMultiplier>
      </DCNTwoTier>
      <DCNFatTree>
          <!-- Number of ports per switch -->
          <K>6</K>
          <!-- The link bandwidth of  for  will be multiplied by this (must be integer) -->
          <coreBWMultiplier>1</<coreBWMultiplier>
      </DCNFatTree>
    </FNSSHandler>
    
	<DirToSaveFiles>/Users/soroosh/Desktop/Network_Files</DirToSaveFiles>
    
    <TotalTime>50000</TotalTime>
    
    <SubstrateNodeNum>200</SubstrateNodeNum>
    
    <!-- between 0-1 -->
    <VNRLinkSplittingRate>.1</VNRLinkSplittingRate>
    
    <!-- 0: Uniform, 1: Exponential, 2: Poisson -->
    <VNRNumNodesDist>0</VNRNumNodesDist>
    <VNRNumNodesDistParam1>3</VNRNumNodesDistParam1>
    <VNRNumNodesDistParam2>10</VNRNumNodesDistparam2>
    <VNRNumNodesDistParam3>-1</VNRNumNodesDistParam3>
    
    
    <!-- 0: Uniform, 1: Exponential, 2: Poisson -->
    <VNRDurationDist>1</VNRDurationDist>
    <VNRDurationDistParam1>1000</VNRDurationDistParam1>
    <VNRDurationDistParam2>-1</VNRDurationDistParam2>
    <VNRDurationDistParam3>-1</VNRDurationDistParam3>
    
    <!-- 0: Uniform, 1: Exponential, 2: Poisson -->
    <VNRArrivalDist>2</VNRArrivalDist>
    <!-- 1/ArrivalRate => for example for arrival rate of 8 per 100 unit time param = 100/8 = 12.5 -->
    <VNRArrivalDistParam1>100</VNRArrivalDistParam1>
    <VNRArrivalDistParam2>-1</VNRArrivalDistParam2>
    <VNRArrivalDistParam3>-1</VNRArrivalDistParam3>
    
    <!-- 0: Uniform, 1: Exponential, 2: Poisson -->
    <VNRMaxDistanceDist>0</VNRMaxDistanceDist>
    <VNRMaxDistanceDistParam1>15</VNRMaxDistanceDistParam1>
    <VNRMaxDistanceDistParam2>25</VNRMaxDistanceDistParam2>
    <VNRMaxDistanceDistParam3>-1</VNRMaxDistanceDistParam3>
    
    <!-- 0: Uniform, 1: Exponential, 2: Poisson -->
    <SNCPUDist>0</SNCPUDist>
    <SNCPUDistParam1>50</SNCPUDistParam1>
    <SNCPUDistParam2>100</SNCPUDistParam2>
    <SNCPUDistParam3>-1</SNCPUDistParam3>
    
    <!-- 0: Uniform, 1: Exponential, 2: Poisson -->
    <SLBWDist>0</SLBWDist>
    <SLBWDistParam1>50</SLBWDistParam1>
    <SLBWDistParam2>100</SLBWDistParam2>
    <SLBWDistParam3>-1</SLBWDistParam3>
    
    <!-- 0: Uniform, 1: Exponential, 2: Poisson -->
    <SLDelayDist>0</SLDelayDist>
    <SLDelayDistParam1>1</SLDelayDistParam1>
    <SLDelayDistParam2>5</SLDelayDistParam2>
    <SLDelayDistParam3>-1</SLDelayDistParam3>
    
    <!-- 0: Uniform, 1: Exponential, 2: Poisson -->
    <VNCPUDist>0</VNCPUDist>
    <VNCPUDistParam1>2</VNCPUDistParam1>
    <VNCPUDistParam2>20</VNCPUDistParam2>
    <VNCPUDistParam3>-1</VNCPUDistParam3>
    
    <!-- 0: Uniform, 1: Exponential, 2: Poisson -->
    <VLBWDist>0</VLBWDist>
    <VLBWDistParam1>1</VLBWDistParam1>
    <VLBWDistParam2>10</VLBWDistParam2>
    <VLBWDistParam3>-1</VLBWDistParam3>
    
    <!-- 0: Uniform, 1: Exponential, 2: Poisson -->
    <VLDelayDist>0</VLDelayDist>
    <VLDelayDistParam1>50</VLDelayDistParam1>
    <VLDelayDistParam2>100</VLDelayDistParam2>
    <VLDelayDistParam3>-1</VLDelayDistParam3>
</NetworkFileGenerator>

<vineyard>
    <SubstrateNetwork>
        <path>/Users/Soroosh/Dropbox/vne-mcts-simulations/Network_Files/substrate_nets/</path>
        <filename>vy_substrate_net_n_50_outergrid_25_inner_grid_25.txt</filename>
    </SubstrateNetwork>
    <VirtualNetRequest>
        <path>/Users/Soroosh/Dropbox/vne-mcts-simulations/Network_Files/vnr-bw-0-50/</path>
        <dir>reqs-100-1000-nodesMin-3-nodesMax-10-grid-25</dir>
        <reqfileExtension>.txt</reqfileExtension>
    </VirtualNetRequest>
    <Constants>
        <revenueMultiplier>1.0</revenueMultiplier>
        <costMultiplier>1.0</costMultiplier>
        <epsilon>1E-6</epsilon>
    </Constants>
    <Configs>
        <setAlpha>false</setAlpha> <!-- if set to false Alpha is automatically set to 1-->
        <setBeta>false</setBeta>   <!-- if set to false Beta is automatically set to 1-->
        <!-- "deterministic" or "randomized" (use exact words without quotes).
         If it is not specified deterministic approach is selected by default. -->
        <nodeMappingType>deterministic</nodeMappingType>
    </Configs>
    <glpk>
        <LPmodelFile>/Users/Soroosh/google-drive/src/codes/workspaces/workspace-cpp/vne-mcts/src/Vineyard/files/lp/CNLM-LP.mod</LPmodelFile>
        <LPdataFile>/Users/Soroosh/google-drive/src/codes/workspaces/workspace-cpp/vne-mcts/src/Vineyard/files/lp/CNLM-LP.dat</LPdataFile>
        <MCFmodelFile>/Users/Soroosh/google-drive/src/codes/workspaces/workspace-cpp/vne-mcts/src/Vineyard/files/lp/MCF.mod</MCFmodelFile>
        <MCFdataFile>/Users/Soroosh/google-drive/src/codes/workspaces/workspace-cpp/vne-mcts/src/Vineyard/files/lp/MCF.dat</MCFdataFile>
        <!-- 0 disabled, 1 enabled -->
        <terminalEnabled>0</terminalEnabled>
    </glpk>
</vineyard>

<MCTS>
    <Simulator>
        <Knowledge>
            <!-- 0:PURE 1:LEGAL 2:SMART -->
            <TreeLevel>1</TreeLevel>
            <!-- 0:PURE 1:LEGAL 2:SMART -->
            <RolloutLevel>1</RolloutLevel>
            <SmartTreeCount>10</SmartTreeCount>
            <SmartTreeValue>1.0</SmartTreeValue>
        </Knowledge>
        <!-- Discount in (0,1] -->
        <discount>1</discount>
        <rewardRange>1000</rewardRange>
    </Simulator>
    
    <MCTSParameters>
        <MaxDepth>10</MaxDepth>
        <NumSimulations>40</NumSimulations>
        <!-- How many nodes to add at each expansion step -->
        <ExpandCount>1</ExpandCount>
        <!-- if this is set to false Exploration constant will be used otherwise Exploration constant will be set to 0 if UseRave flag is set or Exploration constant will be set to rewardRange.-->
        <AutoExploration>false</AutoExploration>
        <!-- One option is to set Exploration Constant c = R_{hi}-R_{lo} -->
        <ExplorationConstant>0.5</ExplorationConstant>
        <!-- Rave Parameters: 0 -> rave is not set -->
        <UseRave>false</UseRave>
        <RaveDiscount>1</RaveDiscount>
        <RaveConstant>0.01</RaveConstant>
        <!-- When set, the baseline rollout algorithm is run. -->
        <DisableTree>0</DisableTree>
        <UseSinglePlayerMCTS>false</UseSinglePlayerMCTS>
        <SPMCTSConstant>10000</SPMCTSConstant>
        
        <!--0: Action Root Parallelization, 1: Full Tree parallelization -->
        <!-- Setting this parameter does not enable parallelism. You need to compile the code with option -DENABLE_MPI=on
                to enable parallelism.-->
        <ParallelizationType>1</ParallelizationType>
    </MCTSParameters>
</MCTS>

<MCVNE>
    <VNEMCTSSimulator>
        <!-- alpha is the substrate liks weight and beta is the substrate node weight -->
        <!-- if set to false the weights are 1 -->
        <setAlpha>false</setAlpha>
        <setBeta>false</setBeta>
    </VNEMCTSSimulator>
    <NodeEmbeddingAlgo>
        <!-- MCF of BFS-SP -->
        <LinkEmbedder>BFS-SP</LinkEmbedder>
    </NodeEmbeddingAlgo>
</MCVNE>

<GRC>
    <!--unit price charged for computing resources-->
    <alpha>1</alpha>
    <!--unit price charged for bandwidth resources-->
    <beta>1</beta>
    <!--It is a positive small threshold defining the convergence of node mapping algorithm-->
    <!--Refer to:
     L. Gong, Y. Wen, Z. Zhu, and T. Lee, “Toward profit-seeking virtual network embedding algorithm via global resource capacity.,” INFOCOM, pp. 1–9, 2014.-->
    <sigma>0.00001</sigma>
    <dampingFactor>0.85</dampingFactor>
</GRC>
